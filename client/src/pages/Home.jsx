import { useEffect, useState } from "react";
import { Loader } from "../components";
import { Card, FormField } from "../components/home";
import { toast } from "react-toastify";

const RenderCards = ({ data, title, deletePost }) => {
  if (data?.length > 0)
    return data.map((post, index) => (
      <Card key={index} {...post} deletePost={deletePost} />
    ));
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [posts, setPosts] = useState(null);
  const [searchText, setsearchText] = useState("");
  const [searchResult, setsearchResult] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);

  useEffect(() => {
    const getPosts = async () => {
      setLoading(true);
      try {
        const fetchData = await fetch(
          `${import.meta.env.VITE_SERVER_BASE_URL}/api/v1/post`,
          {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          }
        );
        const resData = await fetchData.json();
        if (resData.alert) {
          setPosts(resData.data.reverse());
        } else {
          toast.error(resData.message, {
            position: "top-center",
            autoClose: 2000,
          });
        }
      } catch (error) {
        console.log(error.message);
      } finally {
        setLoading(false);
      }
    };

    return () => getPosts();
  }, []);

  const deletePost = async (_id) => {
    try {
      const fetchData = await fetch(
        `${import.meta.env.VITE_SERVER_BASE_URL}/api/v1/post/${_id}`,
        {
          method: "DELETE",
        }
      );

      const resData = await fetchData.json();
      setPosts(posts.filter((post) => post._id !== resData.id));
      toast.success(resData.message, {
        position: "top-center",
        autoClose: 2000,
      });
    } catch (error) {
      console.log(error.message);
    }
  };

  const handleSearch = (e) => {
    clearTimeout(searchTimeout);
    setsearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResults = posts.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setsearchResult(searchResults);
      }, 500)
    );
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="text-2xl font-semibold text-slate-900 mb-2">
          Explore the Beauty of Art
        </h1>
        <p className="text-sm font-normal text-slate-500 max-w[500px]">
          Discover an Assortment of Imaginative and Visually Stunning Images
          Generated by Art Generator: Browse the Collection Now!
        </p>
      </div>
      <div className="mt-16">
        <FormField
          label="Search posts"
          type="type"
          name="text"
          placeholder="Search posts..."
          value={searchText}
          handleChange={handleSearch}
        />
      </div>
      <div className="mt-10">
        {loading ? (
          <div className="flex justify-content items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="mb-3 text-lg font-normal text-slate-500">
                Showing results for{" "}
                <span className="text-slate-950">{searchText}</span>
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards
                  data={searchResult}
                  title="No search results found"
                  deletePost={deletePost}
                />
              ) : (
                <RenderCards
                  data={posts}
                  title="No posts found"
                  deletePost={deletePost}
                />
              )}
            </div>
          </>
        )}
      </div>
    </section>
  );
};

export default Home;
