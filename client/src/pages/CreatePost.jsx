import { useState } from "react";
import { toast } from "react-toastify";
import { FormField, Loader } from "../components";
import { TbPhoto } from "react-icons/tb";
import { getRandomPrompt } from "../utils";
import { useNavigate } from "react-router-dom";

const CreatePost = () => {
  const navigate = useNavigate();
  const [data, setdata] = useState({
    name: "",
    prompt: "",
    image: "",
  });
  const [generateImg, setGenerateImg] = useState(false);
  const [loading, setloading] = useState(false);

  const handleSubmit = async (e) => {
    e.preventDefault();

    const { name, prompt, image } = data;

    if (name && prompt && image) {
      setloading(true);
      try {
        const fetchData = await fetch(`${import.meta.env.VITE_SERVER_BASE_URL}/api/v1/post`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(data),
        });

        const resData = await fetchData.json();
        navigate("/");
      } catch (error) {
        console.log(error.message);
      } finally {
        setloading(false);
      }
    }
  };

  const handleChange = (e) => {
    setdata((pre) => {
      return { ...pre, [e.target.name]: e.target.value };
    });
  };

  const handleSupriseMe = () => {
    const randomPrompt = getRandomPrompt(data.prompt);
    setdata({ ...data, prompt: randomPrompt });
  };

  const generateImage = async () => {
    if (data.prompt) {
      try {
        setGenerateImg(true);
        const fetchData = await fetch(`${import.meta.env.VITE_SERVER_BASE_URL}/api/v1/home`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ prompt: data.prompt }),
        });
        const resData = await fetchData.json();

        setdata({ ...data, image: `data:image/jpeg;base64,${resData.image}` });
      } catch (error) {
        console.log(error.message);
      } finally {
        setGenerateImg(false);
      }
    } else {
      toast.error("Please enter a prompt", {
        position: "top-center",
        autoClose: 2000,
      });
    }
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="text-2xl font-semibold text-slate-900 mb-2">Create</h1>
        <p className="text-sm font-normal text-slate-500 max-w[500px]">
          Create an Assortment of Imaginative and Visually Stunning Images
          Generated by Art Generator.
        </p>
      </div>

      <form onSubmit={(e) => handleSubmit(e)} className="w-full mt-12">
        <div className="flex flex-col gap-5">
          <FormField
            label="Name"
            type="text"
            name="name"
            placeholder=""
            value={data.name}
            handleChange={(e) => handleChange(e)}
          />
          <FormField
            label="Prompt"
            type="text"
            name="prompt"
            placeholder=""
            value={data.prompt}
            handleChange={(e) => handleChange(e)}
            supriseMe
            handleSupriseMe={handleSupriseMe}
          />
          <div className="relative flex justify-center items-center w-64 h-64 p-3 bg-slate-50 border border-slate-300 rounded-lg text-sm text-slate-900 focus:ring-violet-700 focus:border-slate-700">
            {data.image ? (
              <img
                src={data.image}
                alt={data.prompt}
                className="w-full h-full object-contain"
              />
            ) : (
              <div className="text-[72px] opacity-40">
                <TbPhoto />
              </div>
            )}

            {generateImg && (
              <div className="absolute flex justify-center items-center rounded-lg inset-0 z-0 bg-black opacity-50">
                <div>
                  <Loader />
                </div>
              </div>
            )}
          </div>
        </div>
        <div className="flex gap-6 mt-6">
          <button
            type="button"
            onClick={generateImage}
            className="sm:w-auto w-full px-6 py-3 bg-violet-700 hover:bg-violet-800 rounded-md text-white text-sm font-medium"
          >
            {generateImg ? "Generating..." : "Generate Image"}
          </button>
        </div>
        <div className="mt-5">
          <button
            type="submit"
            className="sm:w-auto w-full px-6 py-3 bg-green-700 hover:bg-green-800 rounded-md text-white text-sm font-medium"
          >
            {loading ? "Sharing..." : "Sharing with the community"}
          </button>
        </div>
      </form>
    </section>
  );
};

export default CreatePost;
